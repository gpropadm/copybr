generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  plan      PlanType @default(FREE)
  publishingSettings String? // JSON com configurações de publicação
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relacionamentos
  subscriptions Subscription[]
  projects      Project[]
  copies        Copy[]
  generations   Generation[]
  socialAccounts SocialAccount[]
  socialPosts   SocialPost[]

  @@map("users")
}

model Subscription {
  id               String           @id @default(cuid())
  userId           String
  stripeCustomerId String?          @unique
  planType         PlanType
  status           SubscriptionStatus @default(ACTIVE)
  currentPeriodEnd DateTime?
  cancelAtPeriodEnd Boolean         @default(false)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt

  // Relacionamentos
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

model Project {
  id          String    @id @default(cuid())
  userId      String
  name        String
  type        String    // 'vendas', 'marketing', 'redes-sociais', etc.
  description String?
  status      String    @default("ativo") // 'ativo', 'pausado', 'arquivado'
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relacionamentos
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  copies      Copy[]
  socialPosts SocialPost[]

  @@map("projects")
}

model Copy {
  id          String    @id @default(cuid())
  userId      String
  projectId   String?
  title       String
  content     String
  templateId  String?
  isPublic    Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relacionamentos
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  project     Project?  @relation(fields: [projectId], references: [id], onDelete: SetNull)
  template    Template? @relation(fields: [templateId], references: [id])
  generations Generation[]
  socialPosts SocialPost[]

  @@map("copies")
}

model Template {
  id          String @id @default(cuid())
  name        String
  description String
  category    String
  prompt      String
  isActive    Boolean @default(true)
  isPremium   Boolean @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relacionamentos
  copies Copy[]

  @@map("templates")
}

model Generation {
  id       String @id @default(cuid())
  userId   String
  copyId   String?
  input    String
  output   String
  tokens   Int    @default(0)
  createdAt DateTime @default(now())

  // Relacionamentos
  user User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  copy Copy? @relation(fields: [copyId], references: [id], onDelete: SetNull)

  @@map("generations")
}

model Usage {
  id            String   @id @default(cuid())
  userId        String
  month         Int      // 1-12
  year          Int      // 2024, 2025, etc
  generations   Int      @default(0)
  tokensUsed    Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([userId, month, year])
  @@map("usage")
}

enum PlanType {
  FREE
  PRO
  PREMIUM
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  PAST_DUE
  UNPAID
}

model SocialAccount {
  id           String          @id @default(cuid())
  userId       String
  platform     SocialPlatform
  username     String
  accessToken  String
  refreshToken String?
  expiresAt    DateTime?
  isActive     Boolean         @default(true)
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt

  // Relacionamentos
  user         User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  posts        SocialPost[]

  @@unique([userId, platform])
  @@map("social_accounts")
}

model SocialPost {
  id            String            @id @default(cuid())
  userId        String
  projectId     String?
  accountId     String
  copyId        String?
  content       String
  platform      SocialPlatform
  scheduledFor  DateTime?
  publishedAt   DateTime?
  status        PostStatus        @default(DRAFT)
  platformPostId String?
  errorMessage  String?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt

  // Relacionamentos
  user          User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  project       Project?          @relation(fields: [projectId], references: [id], onDelete: SetNull)
  account       SocialAccount     @relation(fields: [accountId], references: [id], onDelete: Cascade)
  copy          Copy?             @relation(fields: [copyId], references: [id], onDelete: SetNull)

  @@map("social_posts")
}

enum SocialPlatform {
  FACEBOOK
  INSTAGRAM
  LINKEDIN
  TWITTER
}

enum PostStatus {
  DRAFT
  SCHEDULED
  PUBLISHING
  PUBLISHED
  FAILED
}