import { NextRequest, NextResponse } from 'next/server'
import { generateCopy, type CopyRequest } from '@/lib/openai'
import { Database } from '@/lib/database'

export async function POST(request: NextRequest) {
  try {
    // Por enquanto usar demo user - depois integrar com auth real
    const userId = request.headers.get('x-user-id') || 'demo-user'
    
    console.log(`üîç Generate Copy - userId: ${userId}`)
    
    // Garantir que usu√°rio existe - criar se n√£o existir
    let user = await Database.getUser(userId);
    if (!user) {
      console.log(`üë§ Criando usu√°rio novo: ${userId}`)
      user = await Database.upsertUser({
        userId,
        email: `${userId}@copybr.temp`,
        planType: 'free',
        status: 'active',
        currentPeriodEnd: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000),
        monthlyUsage: 0,
        emailVerified: false
      });
    }
    
    // Verificar se usu√°rio pode gerar copy
    const canGenerate = await Database.canGenerateCopy(userId);
    
    console.log(`üìä Can generate check:`, canGenerate)
    
    if (!canGenerate.allowed) {
      console.log(`‚ùå Blocked: ${canGenerate.reason}`)
      return NextResponse.json(
        { 
          error: 'Limite excedido',
          message: canGenerate.reason,
          usage: canGenerate.usage,
          limit: canGenerate.limit,
          userId: userId
        },
        { status: 403 }
      );
    }
    
    const body = await request.json() as CopyRequest
    
    // Valida√ß√£o b√°sica
    if (!body.template || !body.input?.trim()) {
      return NextResponse.json(
        { error: 'Template e descri√ß√£o s√£o obrigat√≥rios' },
        { status: 400 }
      )
    }

    if (body.input.length > 1000) {
      return NextResponse.json(
        { error: 'Descri√ß√£o muito longa (m√°ximo 1000 caracteres)' },
        { status: 400 }
      )
    }

    // Aqui voc√™ pode implementar:
    // - Verifica√ß√£o de autentica√ß√£o
    // - Limites de uso por plano
    // - Rate limiting
    // - Logs de uso

    // Gerar copy
    const results = await generateCopy(body)
    
    // Incrementar uso do usu√°rio
    await Database.incrementUsage(userId, 1);
    
    // Buscar dados atualizados
    const updatedCanGenerate = await Database.canGenerateCopy(userId);
    
    return NextResponse.json({ 
      success: true, 
      data: results,
      usage: {
        current: updatedCanGenerate.usage || 0,
        limit: updatedCanGenerate.limit || 0,
        remaining: updatedCanGenerate.limit === -1 ? -1 : (updatedCanGenerate.limit || 0) - (updatedCanGenerate.usage || 0)
      }
    })
    
  } catch (error) {
    console.error('Erro na API de gera√ß√£o:', error)
    
    return NextResponse.json(
      { 
        error: 'Erro interno do servidor',
        message: error instanceof Error ? error.message : 'Erro desconhecido'
      },
      { status: 500 }
    )
  }
}