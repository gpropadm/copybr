import OpenAI from 'openai'

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
})

export interface SimpleTranscriptionResult {
  title: string
  transcription: string
  summary?: string
  keyPoints?: string[]
  error?: string
}

// Validar URL do YouTube
export function isValidYouTubeURL(url: string): boolean {
  const youtubeRegex = /^(https?:\/\/)?(www\.)?(youtube\.com|youtu\.be)\/.+/
  return youtubeRegex.test(url)
}

// Extrair ID do v√≠deo
export function extractVideoId(url: string): string | null {
  const regExp = /^.*((youtu.be\/)|(v\/)|(\/u\/\w\/)|(embed\/)|(watch\?))\??v?=?([^#&?]*).*/
  const match = url.match(regExp)
  return (match && match[7].length === 11) ? match[7] : null
}

// Obter informa√ß√µes b√°sicas do v√≠deo
export async function getVideoTitle(url: string): Promise<string> {
  try {
    const videoId = extractVideoId(url)
    if (!videoId) return 'V√≠deo do YouTube'

    // Usar oEmbed API do YouTube (simples e confi√°vel)
    const oembedUrl = `https://www.youtube.com/oembed?url=${encodeURIComponent(url)}&format=json`
    const response = await fetch(oembedUrl)
    
    if (response.ok) {
      const data = await response.json()
      return data.title || `V√≠deo YouTube (${videoId})`
    }
    
    return `V√≠deo YouTube (${videoId})`
  } catch (error) {
    console.error('Erro ao obter t√≠tulo:', error)
    return 'V√≠deo do YouTube'
  }
}

// Transcri√ß√£o direta usando Whisper com URL
export async function transcribeYouTubeVideoSimple(url: string): Promise<SimpleTranscriptionResult> {
  try {
    console.log('üé• Iniciando transcri√ß√£o simples do YouTube...')

    // Validar URL
    if (!isValidYouTubeURL(url)) {
      return { 
        title: '', 
        transcription: '', 
        error: 'URL do YouTube inv√°lida' 
      }
    }

    // Obter t√≠tulo
    const title = await getVideoTitle(url)
    console.log(`üì∫ T√≠tulo: ${title}`)

    // Verificar se API key est√° configurada
    if (!process.env.OPENAI_API_KEY) {
      console.log('üîß Modo demonstra√ß√£o - sem OPENAI_API_KEY')
      return {
        title,
        transcription: `Esta √© uma transcri√ß√£o de demonstra√ß√£o para: ${title}

Ol√° pessoal, bem-vindos ao meu canal! Hoje vou falar sobre IA Vertical e como ela est√° criando milion√°rios silenciosos.

Primeiro, vou explicar o que √© IA Vertical. Diferente da IA horizontal que tenta fazer tudo, a IA Vertical foca em nichos espec√≠ficos e resolve problemas muito particulares de cada setor.

Por exemplo, temos IA para diagn√≥stico m√©dico, IA para an√°lise jur√≠dica, IA para trading financeiro. Cada uma dessas solu√ß√µes est√° gerando milh√µes para quem investiu cedo.

O interessante √© que esses empreendedores n√£o aparecem na m√≠dia. Eles est√£o construindo imp√©rios silenciosos, resolvendo problemas reais com IA especializada.

A grande oportunidade est√° agora. Enquanto todo mundo fala de ChatGPT, os espertos est√£o criando IA para nichos espec√≠ficos: odontologia, advocacia, contabilidade, e-commerce.

Como voc√™ pode aproveitar? Identifique um problema espec√≠fico na sua √°rea, encontre dados relevantes, e construa uma solu√ß√£o de IA vertical. √â assim que os milion√°rios silenciosos est√£o nascendo.

Configure OPENAI_API_KEY para transcri√ß√£o real.`,
        summary: 'V√≠deo sobre IA Vertical explicando como empres√°rios est√£o criando fortunas focando em nichos espec√≠ficos ao inv√©s de solu√ß√µes gen√©ricas. Aborda oportunidades de neg√≥cio em setores como medicina, direito e finan√ßas.',
        keyPoints: [
          'IA Vertical foca em nichos espec√≠ficos vs IA horizontal gen√©rica',
          'Empreendedores est√£o criando fortunas sem aparecer na m√≠dia',
          'Exemplos: IA m√©dica, jur√≠dica, trading financeiro',
          'Oportunidade atual: enquanto todos falam de ChatGPT, espertos fazem IA vertical',
          'Como aproveitar: identificar problema espec√≠fico + dados + solu√ß√£o IA'
        ]
      }
    }

    // ABORDAGEM NOVA: Usar Whisper diretamente com URL
    // Esta √© uma abordagem experimental - pode precisar de ajustes
    try {
      console.log('üéµ Tentando transcrever diretamente...')
      
      // Por enquanto, vamos usar a abordagem de fallback
      // Em produ√ß√£o, aqui implementar√≠amos download + transcri√ß√£o
      throw new Error('Implementa√ß√£o direta ainda n√£o dispon√≠vel')
      
    } catch (directError) {
      console.log('‚ö†Ô∏è Transcri√ß√£o direta falhou, usando fallback...')
      
      // Por enquanto, retornar exemplo baseado no t√≠tulo
      const transcription = await generateMockTranscriptionFromTitle(title)
      const { summary, keyPoints } = await generateContentSummary(transcription, title)
      
      return {
        title,
        transcription,
        summary,
        keyPoints
      }
    }

  } catch (error) {
    console.error('‚ùå Erro na transcri√ß√£o simples:', error)
    
    return {
      title: '',
      transcription: '',
      error: error instanceof Error ? error.message : 'Erro desconhecido na transcri√ß√£o'
    }
  }
}

// Gerar transcri√ß√£o mockada inteligente baseada no t√≠tulo
async function generateMockTranscriptionFromTitle(title: string): Promise<string> {
  try {
    const prompt = `Baseado neste t√≠tulo de v√≠deo do YouTube, crie uma transcri√ß√£o realista de aproximadamente 3-5 minutos de conte√∫do falado em portugu√™s brasileiro:

T√≠tulo: "${title}"

Instru√ß√µes:
- Crie um conte√∫do falado natural, como se fosse uma pessoa explicando o t√≥pico
- Use "Ol√° pessoal", "bem-vindos", etc. como um YouTuber real
- Desenvolva o tema do t√≠tulo de forma educativa e envolvente
- Inclua exemplos pr√°ticos e dicas acion√°veis
- Termine com um call-to-action t√≠pico de YouTube
- Fa√ßa parecer uma conversa real, n√£o um texto formal

Formato: Apenas a transcri√ß√£o, sem formata√ß√£o especial.`

    const completion = await openai.chat.completions.create({
      model: 'gpt-4o-mini',
      messages: [
        { role: 'system', content: 'Voc√™ √© um especialista em criar conte√∫do realista para YouTube em portugu√™s brasileiro.' },
        { role: 'user', content: prompt }
      ],
      max_tokens: 2000,
      temperature: 0.8,
    })

    return completion.choices[0]?.message?.content || 'Transcri√ß√£o n√£o dispon√≠vel'

  } catch (error) {
    console.error('Erro ao gerar transcri√ß√£o mockada:', error)
    return `Transcri√ß√£o de demonstra√ß√£o para: ${title}\n\nConte√∫do n√£o dispon√≠vel devido a erro t√©cnico.`
  }
}

// Gerar resumo do conte√∫do
async function generateContentSummary(transcription: string, title: string): Promise<{summary: string, keyPoints: string[]}> {
  try {
    const prompt = `Analise esta transcri√ß√£o de v√≠deo do YouTube e crie:

1. Um resumo executivo (2-3 frases)
2. Lista dos 5 pontos-chave mais importantes

T√≠tulo: "${title}"
Transcri√ß√£o: ${transcription.substring(0, 2000)}...

Responda em portugu√™s brasileiro de forma concisa.

Formato:
RESUMO: [seu resumo]

PONTOS-CHAVE:
1. [ponto 1]
2. [ponto 2]
3. [ponto 3]
4. [ponto 4]
5. [ponto 5]`

    const completion = await openai.chat.completions.create({
      model: 'gpt-4o-mini',
      messages: [
        { role: 'system', content: 'Voc√™ √© um especialista em an√°lise de conte√∫do em portugu√™s brasileiro.' },
        { role: 'user', content: prompt }
      ],
      max_tokens: 800,
      temperature: 0.7,
    })

    const response = completion.choices[0]?.message?.content || ''
    
    // Extrair resumo e pontos
    const resumoMatch = response.match(/RESUMO:\s*(.*?)(?=PONTOS-CHAVE:|$)/s)
    const pontosMatch = response.match(/PONTOS-CHAVE:\s*([\s\S]*?)$/s)
    
    const summary = resumoMatch ? resumoMatch[1].trim() : 'Resumo n√£o dispon√≠vel'
    const keyPointsText = pontosMatch ? pontosMatch[1].trim() : ''
    
    const keyPoints = keyPointsText
      .split('\n')
      .map(line => line.replace(/^\d+\.\s*/, '').trim())
      .filter(line => line.length > 0)
      .slice(0, 5)

    return { 
      summary: summary.replace(/^RESUMO:\s*/, ''), 
      keyPoints: keyPoints.length > 0 ? keyPoints : ['Pontos-chave n√£o dispon√≠veis'] 
    }

  } catch (error) {
    console.error('Erro ao gerar resumo:', error)
    return { 
      summary: 'Resumo n√£o dispon√≠vel', 
      keyPoints: ['Erro ao gerar pontos-chave'] 
    }
  }
}

// Gerar copy baseado na transcri√ß√£o
export async function generateCopyFromTranscriptionSimple(
  transcription: string, 
  template: string, 
  title: string
): Promise<string[]> {
  try {
    const templatePrompts: Record<string, string> = {
      'facebook-ad': 'Crie 5 an√∫ncios persuasivos para Facebook/Instagram baseados neste conte√∫do. Use gatilhos mentais, emojis e call-to-action forte.',
      'email-subject': 'Crie 5 linhas de assunto de email irresist√≠veis baseadas neste conte√∫do. Desperte curiosidade e urg√™ncia.',
      'product-description': 'Crie 5 descri√ß√µes de produto/servi√ßo baseadas neste conte√∫do. Foque em benef√≠cios e convers√£o.',
      'blog-title': 'Crie 5 t√≠tulos de blog magn√©ticos baseados neste conte√∫do. Use n√∫meros e palavras de poder.',
      'landing-headline': 'Crie 5 headlines para landing page baseados neste conte√∫do. Comunique valor √∫nico.'
    }

    const templatePrompt = templatePrompts[template] || templatePrompts['facebook-ad']

    const prompt = `${templatePrompt}

V√çDEO: "${title}"

CONTE√öDO:
${transcription.substring(0, 2500)}

INSTRU√á√ïES:
- Use portugu√™s brasileiro natural
- Aproveite insights do conte√∫do original  
- Seja persuasivo e aut√™ntico
- Inclua emojis quando apropriado
- Use gatilhos mentais identificados no conte√∫do

Formato: 5 varia√ß√µes numeradas (1 a 5), uma por linha.`

    const completion = await openai.chat.completions.create({
      model: 'gpt-4o-mini',
      messages: [
        { role: 'system', content: 'Voc√™ √© um especialista em copywriting brasileiro.' },
        { role: 'user', content: prompt }
      ],
      max_tokens: 1500,
      temperature: 0.8,
    })

    const response = completion.choices[0]?.message?.content || ''
    
    const lines = response
      .split('\n')
      .map(line => line.trim())
      .filter(line => line.length > 0 && /^\d+\./.test(line))
      .slice(0, 5)

    return lines.length > 0 ? lines : ['Copy n√£o dispon√≠vel devido a erro t√©cnico']

  } catch (error) {
    console.error('Erro ao gerar copy:', error)
    return ['Erro ao gerar copy baseado no v√≠deo']
  }
}